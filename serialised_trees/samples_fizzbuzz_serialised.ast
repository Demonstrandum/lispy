VISUALISED_ABSTRACT_SYNTAX_TREE
┃
┣━<AST::Node[Call]
┃      ┣━caller
┃      ┃  ┗━<AST::Node[Symbol] ('define')>
┃      ┗━operands=[
┃         <AST::Node[Call]
┃            ┣━caller
┃            ┃  ┗━<AST::Node[Symbol] ('fizz')>
┃            ┗━operands=[
┃               <AST::Node[Symbol] ('x')>
┃              ]>
┃         <AST::Node[Call]
┃            ┣━caller
┃            ┃  ┗━<AST::Node[Symbol] ('if')>
┃            ┗━operands=[
┃               <AST::Node[Call]
┃               ┣━caller
┃               ┃  ┗━<AST::Node[Symbol] ('divisible')>
┃               ┗━operands=[
┃                  <AST::Node[Symbol] ('x')>
┃                  <AST::Node[Numeric] (3)>
┃                 ]>
┃               <AST::Node[Call]
┃               ┣━caller
┃               ┃  ┗━<AST::Node[Symbol] ('if')>
┃               ┗━operands=[
┃                  <AST::Node[Call]
┃                  ┣━caller
┃                  ┃  ┗━<AST::Node[Symbol] ('divisible')>
┃                  ┗━operands=[
┃                     <AST::Node[Symbol] ('x')>
┃                     <AST::Node[Numeric] (5)>
┃                    ]>
┃                  <AST::Node[String] ('FizzBuzz')>
┃                  <AST::Node[String] ('Fizz')>
┃                 ]>
┃               <AST::Node[Call]
┃               ┣━caller
┃               ┃  ┗━<AST::Node[Symbol] ('if')>
┃               ┗━operands=[
┃                  <AST::Node[Call]
┃                  ┣━caller
┃                  ┃  ┗━<AST::Node[Symbol] ('divisible')>
┃                  ┗━operands=[
┃                     <AST::Node[Symbol] ('x')>
┃                     <AST::Node[Numeric] (5)>
┃                    ]>
┃                  <AST::Node[String] ('Buzz')>
┃                  <AST::Node[Call]
┃                  ┣━caller
┃                  ┃  ┗━<AST::Node[Symbol] ('string')>
┃                  ┗━operands=[
┃                     <AST::Node[Symbol] ('x')>
┃                    ]>
┃                 ]>
┃              ]>
┃        ]>
┃
┣━<AST::Node[Call]
┃      ┣━caller
┃      ┃  ┗━<AST::Node[Symbol] ('let')>
┃      ┗━operands=[
┃         <AST::Node[Call]
┃            ┣━caller
┃            ┃  ┗━<AST::Node[Symbol] ('a')>
┃            ┗━operands=[
┃               <AST::Node[Call]
┃               ┣━caller
┃               ┃  ┗━<AST::Node[Symbol] ('range')>
┃               ┗━operands=[
┃                  <AST::Node[Numeric] (1)>
┃                  <AST::Node[Numeric] (20)>
┃                 ]>
┃              ]>
┃        ]>
┃
┣━<AST::Node[Call]
┃      ┣━caller
┃      ┃  ┗━<AST::Node[Symbol] ('puts')>
┃      ┗━operands=[
┃         <AST::Node[String] ('\nPlain:')>
┃         <AST::Node[Symbol] ('a')>
┃        ]>
┃
┣━<AST::Node[Call]
┃      ┣━caller
┃      ┃  ┗━<AST::Node[Symbol] ('puts')>
┃      ┗━operands=[
┃         <AST::Node[String] ("\nFizz'd:")>
┃         <AST::Node[Call]
┃            ┣━caller
┃            ┃  ┗━<AST::Node[Symbol] ('map')>
┃            ┗━operands=[
┃               <AST::Node[Symbol] ('fizz')>
┃               <AST::Node[Symbol] ('a')>
┃              ]>
┃        ]>
┃
┣━<AST::Node[Call]
┃      ┣━caller
┃      ┃  ┗━<AST::Node[Symbol] ('puts')>
┃      ┗━operands=[]>
┃
SERIALISED_PICKLE_AST
b'\x80\x03clispy.tree\nTree\nq\x00)\x81q\x01(clispy.tree\nCall\nq\x02)\x81q\x03}q\x04(X\x08\x00\x00\x00locationq\x05}q\x06(X\x04\x00\x00\x00lineq\x07K\x01X\x06\x00\x00\x00columnq\x08K\x01X\x08\x00\x00\x00filenameq\tX\x16\x00\x00\x00samples/fizzbuzz.lispyq\nX\x04\x00\x00\x00spanq\x0bK\x01uX\x08\x00\x00\x00operandsq\x0c]q\r(h\x02)\x81q\x0e}q\x0f(h\x05}q\x10(h\x07K\x01h\x08K\th\th\nh\x0bK\x01uh\x0c]q\x11clispy.tree\nSymbol\nq\x12)\x81q\x13}q\x14(h\x05}q\x15(h\x07K\x01h\x08K\x0fh\th\nh\x0bK\x01uX\x05\x00\x00\x00valueq\x16X\x01\x00\x00\x00xq\x17X\x04\x00\x00\x00typeq\x18h\x12X\x04\x00\x00\x00nameq\x19X\x06\x00\x00\x00Symbolq\x1aubah\x16h\x12)\x81q\x1b}q\x1c(h\x05}q\x1d(h\x07K\x01h\x08K\nh\th\nh\x0bK\x04uh\x16X\x04\x00\x00\x00fizzq\x1eh\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\x1fubh\x18h\x02h\x19X\x04\x00\x00\x00Callq ubh\x02)\x81q!}q"(h\x05}q#(h\x07K\x02h\x08K\x03h\th\nh\x0bK\x01uh\x0c]q$(h\x02)\x81q%}q&(h\x05}q\'(h\x07K\x02h\x08K\x07h\th\nh\x0bK\x01uh\x0c]q((h\x12)\x81q)}q*(h\x05}q+(h\x07K\x02h\x08K\x12h\th\nh\x0bK\x01uh\x16h\x17h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq,ubclispy.tree\nNumeric\nq-)\x81q.}q/(h\x05}q0(h\x07K\x02h\x08K\x14h\th\nh\x0bK\x01uh\x16K\x03h\x18h-h\x19X\x07\x00\x00\x00Numericq1ubeh\x16h\x12)\x81q2}q3(h\x05}q4(h\x07K\x02h\x08K\x08h\th\nh\x0bK\tuh\x16X\t\x00\x00\x00divisibleq5h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq6ubh\x18h\x02h\x19X\x04\x00\x00\x00Callq7ubh\x02)\x81q8}q9(h\x05}q:(h\x07K\x03h\x08K\x05h\th\nh\x0bK\x01uh\x0c]q;(h\x02)\x81q<}q=(h\x05}q>(h\x07K\x03h\x08K\th\th\nh\x0bK\x01uh\x0c]q?(h\x12)\x81q@}qA(h\x05}qB(h\x07K\x03h\x08K\x14h\th\nh\x0bK\x01uh\x16h\x17h\x18h\x12h\x19X\x06\x00\x00\x00SymbolqCubh-)\x81qD}qE(h\x05}qF(h\x07K\x03h\x08K\x16h\th\nh\x0bK\x01uh\x16K\x05h\x18h-h\x19X\x07\x00\x00\x00NumericqGubeh\x16h\x12)\x81qH}qI(h\x05}qJ(h\x07K\x03h\x08K\nh\th\nh\x0bK\tuh\x16X\t\x00\x00\x00divisibleqKh\x18h\x12h\x19X\x06\x00\x00\x00SymbolqLubh\x18h\x02h\x19X\x04\x00\x00\x00CallqMubclispy.tree\nString\nqN)\x81qO}qP(h\x05}qQ(h\x07K\x04h\x08K\x07h\th\nh\x0bK\x08uh\x16X\x08\x00\x00\x00FizzBuzzqRh\x18hNh\x19X\x06\x00\x00\x00StringqSubhN)\x81qT}qU(h\x05}qV(h\x07K\x05h\x08K\x07h\th\nh\x0bK\x04uh\x16X\x04\x00\x00\x00FizzqWh\x18hNh\x19X\x06\x00\x00\x00StringqXubeh\x16h\x12)\x81qY}qZ(h\x05}q[(h\x07K\x03h\x08K\x06h\th\nh\x0bK\x02uh\x16X\x02\x00\x00\x00ifq\\h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq]ubh\x18h\x02h\x19X\x04\x00\x00\x00Callq^ubh\x02)\x81q_}q`(h\x05}qa(h\x07K\x06h\x08K\x05h\th\nh\x0bK\x01uh\x0c]qb(h\x02)\x81qc}qd(h\x05}qe(h\x07K\x06h\x08K\th\th\nh\x0bK\x01uh\x0c]qf(h\x12)\x81qg}qh(h\x05}qi(h\x07K\x06h\x08K\x14h\th\nh\x0bK\x01uh\x16h\x17h\x18h\x12h\x19X\x06\x00\x00\x00Symbolqjubh-)\x81qk}ql(h\x05}qm(h\x07K\x06h\x08K\x16h\th\nh\x0bK\x01uh\x16K\x05h\x18h-h\x19X\x07\x00\x00\x00Numericqnubeh\x16h\x12)\x81qo}qp(h\x05}qq(h\x07K\x06h\x08K\nh\th\nh\x0bK\tuh\x16X\t\x00\x00\x00divisibleqrh\x18h\x12h\x19X\x06\x00\x00\x00Symbolqsubh\x18h\x02h\x19X\x04\x00\x00\x00CallqtubhN)\x81qu}qv(h\x05}qw(h\x07K\x07h\x08K\x07h\th\nh\x0bK\x04uh\x16X\x04\x00\x00\x00Buzzqxh\x18hNh\x19X\x06\x00\x00\x00Stringqyubh\x02)\x81qz}q{(h\x05}q|(h\x07K\x08h\x08K\x07h\th\nh\x0bK\x01uh\x0c]q}h\x12)\x81q~}q\x7f(h\x05}q\x80(h\x07K\x08h\x08K\x0fh\th\nh\x0bK\x01uh\x16h\x17h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\x81ubah\x16h\x12)\x81q\x82}q\x83(h\x05}q\x84(h\x07K\x08h\x08K\x08h\th\nh\x0bK\x06uh\x16X\x06\x00\x00\x00stringq\x85h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\x86ubh\x18h\x02h\x19X\x04\x00\x00\x00Callq\x87ubeh\x16h\x12)\x81q\x88}q\x89(h\x05}q\x8a(h\x07K\x06h\x08K\x06h\th\nh\x0bK\x02uh\x16X\x02\x00\x00\x00ifq\x8bh\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\x8cubh\x18h\x02h\x19X\x04\x00\x00\x00Callq\x8dubeh\x16h\x12)\x81q\x8e}q\x8f(h\x05}q\x90(h\x07K\x02h\x08K\x04h\th\nh\x0bK\x02uh\x16X\x02\x00\x00\x00ifq\x91h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\x92ubh\x18h\x02h\x19X\x04\x00\x00\x00Callq\x93ubeh\x16h\x12)\x81q\x94}q\x95(h\x05}q\x96(h\x07K\x01h\x08K\x02h\th\nh\x0bK\x06uh\x16X\x06\x00\x00\x00defineq\x97h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\x98ubh\x18h\x02h\x19X\x04\x00\x00\x00Callq\x99ubh\x02)\x81q\x9a}q\x9b(h\x05}q\x9c(h\x07K\nh\x08K\x01h\th\nh\x0bK\x01uh\x0c]q\x9dh\x02)\x81q\x9e}q\x9f(h\x05}q\xa0(h\x07K\nh\x08K\x06h\th\nh\x0bK\x01uh\x0c]q\xa1h\x02)\x81q\xa2}q\xa3(h\x05}q\xa4(h\x07K\nh\x08K\th\th\nh\x0bK\x01uh\x0c]q\xa5(h-)\x81q\xa6}q\xa7(h\x05}q\xa8(h\x07K\nh\x08K\x10h\th\nh\x0bK\x01uh\x16K\x01h\x18h-h\x19X\x07\x00\x00\x00Numericq\xa9ubh-)\x81q\xaa}q\xab(h\x05}q\xac(h\x07K\nh\x08K\x12h\th\nh\x0bK\x02uh\x16K\x14h\x18h-h\x19X\x07\x00\x00\x00Numericq\xadubeh\x16h\x12)\x81q\xae}q\xaf(h\x05}q\xb0(h\x07K\nh\x08K\nh\th\nh\x0bK\x05uh\x16X\x05\x00\x00\x00rangeq\xb1h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\xb2ubh\x18h\x02h\x19X\x04\x00\x00\x00Callq\xb3ubah\x16h\x12)\x81q\xb4}q\xb5(h\x05}q\xb6(h\x07K\nh\x08K\x07h\th\nh\x0bK\x01uh\x16X\x01\x00\x00\x00aq\xb7h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\xb8ubh\x18h\x02h\x19X\x04\x00\x00\x00Callq\xb9ubah\x16h\x12)\x81q\xba}q\xbb(h\x05}q\xbc(h\x07K\nh\x08K\x02h\th\nh\x0bK\x03uh\x16X\x03\x00\x00\x00letq\xbdh\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\xbeubh\x18h\x02h\x19X\x04\x00\x00\x00Callq\xbfubh\x02)\x81q\xc0}q\xc1(h\x05}q\xc2(h\x07K\x0ch\x08K\x01h\th\nh\x0bK\x01uh\x0c]q\xc3(hN)\x81q\xc4}q\xc5(h\x05}q\xc6(h\x07K\x0ch\x08K\x07h\th\nh\x0bK\x07uh\x16X\x07\x00\x00\x00\nPlain:q\xc7h\x18hNh\x19X\x06\x00\x00\x00Stringq\xc8ubh\x12)\x81q\xc9}q\xca(h\x05}q\xcb(h\x07K\x0ch\x08K\x0fh\th\nh\x0bK\x01uh\x16h\xb7h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\xccubeh\x16h\x12)\x81q\xcd}q\xce(h\x05}q\xcf(h\x07K\x0ch\x08K\x02h\th\nh\x0bK\x04uh\x16X\x04\x00\x00\x00putsq\xd0h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\xd1ubh\x18h\x02h\x19X\x04\x00\x00\x00Callq\xd2ubh\x02)\x81q\xd3}q\xd4(h\x05}q\xd5(h\x07K\rh\x08K\x01h\th\nh\x0bK\x01uh\x0c]q\xd6(hN)\x81q\xd7}q\xd8(h\x05}q\xd9(h\x07K\rh\x08K\x07h\th\nh\x0bK\x08uh\x16X\x08\x00\x00\x00\nFizz\'d:q\xdah\x18hNh\x19X\x06\x00\x00\x00Stringq\xdbubh\x02)\x81q\xdc}q\xdd(h\x05}q\xde(h\x07K\rh\x08K\x10h\th\nh\x0bK\x01uh\x0c]q\xdf(h\x12)\x81q\xe0}q\xe1(h\x05}q\xe2(h\x07K\rh\x08K\x15h\th\nh\x0bK\x04uh\x16X\x04\x00\x00\x00fizzq\xe3h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\xe4ubh\x12)\x81q\xe5}q\xe6(h\x05}q\xe7(h\x07K\rh\x08K\x1ah\th\nh\x0bK\x01uh\x16h\xb7h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\xe8ubeh\x16h\x12)\x81q\xe9}q\xea(h\x05}q\xeb(h\x07K\rh\x08K\x11h\th\nh\x0bK\x03uh\x16X\x03\x00\x00\x00mapq\xech\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\xedubh\x18h\x02h\x19X\x04\x00\x00\x00Callq\xeeubeh\x16h\x12)\x81q\xef}q\xf0(h\x05}q\xf1(h\x07K\rh\x08K\x02h\th\nh\x0bK\x04uh\x16X\x04\x00\x00\x00putsq\xf2h\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\xf3ubh\x18h\x02h\x19X\x04\x00\x00\x00Callq\xf4ubh\x02)\x81q\xf5}q\xf6(h\x05}q\xf7(h\x07K\x0fh\x08K\x01h\th\nh\x0bK\x01uh\x0c]q\xf8h\x16h\x12)\x81q\xf9}q\xfa(h\x05}q\xfb(h\x07K\x0fh\x08K\x02h\th\nh\x0bK\x04uh\x16X\x04\x00\x00\x00putsq\xfch\x18h\x12h\x19X\x06\x00\x00\x00Symbolq\xfdubh\x18h\x02h\x19X\x04\x00\x00\x00Callq\xfeube}q\xffX\x04\x00\x00\x00filer\x00\x01\x00\x00h\nsb.'