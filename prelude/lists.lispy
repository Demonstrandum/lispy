(define (empty? l) (= (size l) 0))

(define (first l) (index    0  l))
(define (last  l) (index (- 1) l))

(let (head first))
(define (tail l) (shift l))

(define (each l cb) (do
  (times (size l) (-> (cb (index x l))))
  (yield l)))

(define (reverse l) (do
  (let (reversed (list)))
  (until (empty? l) (do
    (push (last l) reversed)
    (pop l)))
  (yield reversed)))

(define (fill l n m)
  (unless (< m n)
    (fill (push n l) (+ n 1) m)
    l))

(define (range n m) (fill '() n m))

(define (map f l)
  (unless (empty? l)
    (concat (list (f (head l))) (map f (tail l)))
    (list)))

(define (reduce f acc l)
  (if (empty? l)
    acc
    (reduce f (f acc (head l)) (tail l))))

(define (filter f l) (do
  (let (new (list)))
  (each l (->
    (if (f x) (push x new))))
  (yield new)))
